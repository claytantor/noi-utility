package com.noi.utility.data;import java.io.IOException;import java.io.InputStream;import java.io.StringReader;import java.net.URL;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import org.xml.sax.SAXParseException;public class XMLDocumentReader{        private static Document document;     private Node documentNode;    private boolean validating;           public XMLDocumentReader()    {        validating = false;    }        public void parse(InputStream stream)    {                DocumentBuilderFactory factory =           DocumentBuilderFactory.newInstance();                              factory.setValidating(validating);        factory.setNamespaceAware(true);                                  try {                        //out = outPrint;                                   DocumentBuilder builder = factory.newDocumentBuilder();           document = builder.parse( stream);           // Cast to XmlDocument for write() operation           // (Not defined until DOM Level 3.)           //XmlDocument xdoc = (XmlDocument) document;           Element eDoc = document.getDocumentElement();           documentNode = (Node)eDoc;           //out.println("\nNAME:" + eDocNode.getNodeName() + " VALUE:" + eDocNode.getNodeValue() + "\n");           //NodeList tNodes = eDocNode.getChildNodes                      //xdoc.write (out);        } catch (SAXParseException spe) {           // Error generated by the parser           System.out.println ("\n** Parsing error"               + ", line " + spe.getLineNumber ()              + ", uri " + spe.getSystemId ());           System.out.println("   " + spe.getMessage() );           // Use the contained exception, if any           Exception  x = spe;           if (spe.getException() != null)               x = spe.getException();           x.printStackTrace();        } catch (SAXException sxe) {           // Error generated by this application           // (or a parser-initialization error)           Exception  x = sxe;           if (sxe.getException() != null)               x = sxe.getException();           x.printStackTrace();        } catch (ParserConfigurationException pce) {            // Parser with specified options can't be built            pce.printStackTrace();        } catch (IOException ioe) {           // I/O error           ioe.printStackTrace();        }                    }       public void parse(URL tUrl)    {                        try {            InputStream tStream = tUrl.openStream();            this.parse(tStream);        } catch (IOException ioe) {           ioe.printStackTrace();        }                                 }            public void parse(String content)    {        StringReader sr = new StringReader(content);                       DocumentBuilderFactory factory =           DocumentBuilderFactory.newInstance();        factory.setValidating(validating);        factory.setNamespaceAware(true);                                  try {                        //out = outPrint;                        InputSource src = new InputSource(sr);                      DocumentBuilder builder = factory.newDocumentBuilder();           document = builder.parse(src);           // Cast to XmlDocument for write() operation           // (Not defined until DOM Level 3.)           //XmlDocument xdoc = (XmlDocument) document;           Element eDoc = document.getDocumentElement();           documentNode = (Node)eDoc;           //out.println("\nNAME:" + eDocNode.getNodeName() + " VALUE:" + eDocNode.getNodeValue() + "\n");           //NodeList tNodes = eDocNode.getChildNodes                      //xdoc.write (out);        } catch (SAXParseException spe) {           // Error generated by the parser           System.out.println ("\n** Parsing error"               + ", line " + spe.getLineNumber ()              + ", uri " + spe.getSystemId ());           System.out.println("   " + spe.getMessage() );           // Use the contained exception, if any           Exception  x = spe;           if (spe.getException() != null)               x = spe.getException();           x.printStackTrace();        } catch (SAXException sxe) {           // Error generated by this application           // (or a parser-initialization error)           Exception  x = sxe;           if (sxe.getException() != null)               x = sxe.getException();           x.printStackTrace();        } catch (ParserConfigurationException pce) {            // Parser with specified options can't be built            pce.printStackTrace();        } catch (IOException ioe) {           // I/O error           ioe.printStackTrace();        }     }        public Node getDocumentNode()    {        return documentNode;    }        public Document getDocument()    {        return this.document;    }    }